apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  labels:
    app: httpserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpserver
  template:
    metadata:
      labels:
        app: httpserver
    spec:
#      //kubectl create secret docker-registry alicloud \
#      //--docker-server="registry.cn-hangzhou.aliyuncs.com" \
#      //--docker-username="jxdxmx@126.com" \
#      //--docker-password="jxdxmx@126.com" \
#      //--docker-email="jxdxmx@126.com"
      imagePullSecrets:
        - name: alicloud
      containers:
        - name: httpserver
          image: registry.cn-hangzhou.aliyuncs.com/xu-citools/httpserver:v1.1
          ports:
            - containerPort: 80
#      startupProbe:
#        httpGet:
#          path: /healthz
#          port: liveness-port
#        failureThreshold: 30
#        periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 80
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
              httpHeaders:
                - name: Custom-Header
                  value: Awesome
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            limits:
              memory: "100Mi"
              cpu: "100m"
            requests:
              memory: "10Mi"
              cpu: "10m"
          lifecycle:
            postStart:
              httpGet:
                path: /prestart
                port: 80
                scheme: HTTP
            preStop:
              exec:
                command:
                  - /stop.sh
          env:
            # 定义环境变量
            - name: PLAYER_INITIAL_LIVES # 请注意这里和 ConfigMap 中的键名是不一样的
              valueFrom:
                configMapKeyRef:
                  name: demo           # 这个值来自 ConfigMap
                  key: player_initial_lives # 需要取值的键
            - name: CONFIG_FILE_NAME
              valueFrom:
                configMapKeyRef:
                  name: demo
                  key: config_file_name
          volumeMounts:
            - name: config
              mountPath: "/opt/"
              readOnly: true
      volumes:
        # 你可以在 Pod 级别设置卷，然后将其挂载到 Pod 内的容器中
        - name: config
          configMap:
            # 提供你想要挂载的 ConfigMap 的名字
            name: demo